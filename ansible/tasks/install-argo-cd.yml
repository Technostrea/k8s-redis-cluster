---
- name: ArgoCD process of installation and config
  hosts: control_plan
  gather_facts: true
  vars_files:
    ../group_vars/argocd.yml
  tasks:
    - name: Ensure ArgoCD directory exists on {{ ansible_env.HOME }}
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/argocd"
        state: directory
        mode: '777'

    - name: Download ArgoCD manifest
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/argoproj/argo-cd/{{ argocd_version }}/manifests/install.yaml"
        dest: "{{ ansible_env.HOME }}/argocd/deploy.yaml"
        force: false
        mode: '777'

    - name: Copy ingress-service manifest for metallb
      ansible.builtin.copy:
        src: ../files/ingress-service.yaml
        dest: /tmp/ingress-service.yaml
        mode: '777'

    - name: Install ArgoCD CLI for {{ ansible_facts['architecture'] }}
      ansible.builtin.shell: |
        cd /tmp/
        curl -sSL -o argocd-linux-amd64 "https://github.com/argoproj/argo-cd/releases/download/{{ argocd_version }}/argocd-linux-amd64"
        sudo install argocd-linux-amd64 /usr/local/bin/argocd
        kubectl apply -f ingress-service.yaml
      when: ansible_facts['architecture'] == 'x86_64'
      register: argocd_install_result
      changed_when: "'Skipping' not in argocd_install_result.stdout"

    - name: Install ArgoCD CLI for {{ ansible_facts['architecture'] }}
      ansible.builtin.shell: |
        cd /tmp/
        curl -sSL -o argocd-linux-arm64 "https://github.com/argoproj/argo-cd/releases/download/{{ argocd_version }}/argocd-linux-arm64"
        sudo install argocd-linux-arm64 /usr/local/bin/argocd
        kubectl apply -f ingress-service.yaml
      when: ansible_facts['architecture'] == 'aarch64'
      register: argocd_install_result
      changed_when: "'Skipping' not in argocd_install_result.stdout"

    - name: Create ArgoCD namespace , ArgoCD ingress and Apply all ArgoCD manifest
      ansible.builtin.shell: |
        cd $HOME/argocd
        kubectl create namespace argocd --dry-run=client -o yaml > namespace.yaml
        kubectl create ingress argocd-server -n argocd --rule='{{ domaine_name }}/*=argocd-server:http' --class=nginx \
        --annotation="alb.ingress.kubernetes.io/ssl-passthrough=true" \
        --annotation="kubernetes.io/ingress.class=nginx" \
        --annotation="nginx.ingress.kubernetes.io/backend-protocol=HTTP" \
        --annotation="nginx.ingress.kubernetes.io/force-ssl-redirect=false" \
        --dry-run=client -o yaml > ingress-argocd.yaml

        kubectl apply -f namespace.yaml
        kubectl apply -n argocd -f deploy.yaml
        kubectl apply -n argocd -f ingress-argocd.yaml
        # Disable tls security
        kubectl patch configmap argocd-cmd-params-cm -n argocd --type merge -p '{"data":{"server.insecure":"true"}}'
        # Restarting argocd-server deployment
        kubectl rollout restart deployment argocd-server -n argocd
      register: apply_result
      changed_when: "'Skipping' not in apply_result.stdout"

    - name: Create ArgoCD namespace and download ArgoCD manifest
      ansible.builtin.shell: |
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
      register: argocd_initial_admin_secret
      changed_when: false

    - name: The initial password for the admin account is auto-generated
      ansible.builtin.debug:
        msg: "{{ argocd_initial_admin_secret.stdout }}"
